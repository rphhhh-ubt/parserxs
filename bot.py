from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
import asyncio
import os
from parser import search_product, get_prices_by_stores
from excel_gen import create_excel


bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å –≤ –õ–µ–Ω—Ç–µ")]],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ –õ–µ–Ω—Ç–µ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
        reply_markup=keyboard
    )


@dp.message(F.text == "üîç –ò—Å–∫–∞—Ç—å –≤ –õ–µ–Ω—Ç–µ")
async def search_button_handler(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")


@dp.message(F.text)
async def search_text_handler(message: Message):
    if not message.text or message.text.startswith("/"):
        return
    
    query = message.text
    status_msg = await message.answer("üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã...")
    
    try:
        products = await search_product(query)
        
        if not products:
            await status_msg.edit_text("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
            return
        
        keyboard_buttons = []
        for product in products[:10]:
            product_name = product["name"]
            volume = product.get("volume", "")
            button_text = f"{product_name}"
            if volume:
                button_text += f" {volume}"
            
            if len(button_text) > 64:
                button_text = button_text[:61] + "..."
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"product:{product['id']}"
                )
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await status_msg.edit_text(
            f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        await status_msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")


@dp.callback_query(F.data.startswith("product:"))
async def product_callback_handler(callback: CallbackQuery):
    await callback.answer()
    
    product_id = callback.data.split(":", 1)[1]
    
    status_msg = await callback.message.edit_text("‚è≥ –°–æ–±–∏—Ä–∞—é —Ü–µ–Ω—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º...")
    
    try:
        prices = await get_prices_by_stores(product_id)
        
        if not prices:
            await status_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
            return
        
        product_name = callback.message.text.split("\n")[0] if callback.message.text else "–¢–æ–≤–∞—Ä"
        
        try:
            excel_data = create_excel(product_name, prices)
            
            file = BufferedInputFile(excel_data, filename=f"{product_name[:50]}.xlsx")
            
            await callback.message.answer_document(
                document=file,
                caption=f"üìä –¶–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}\n"
                        f"–ù–∞–π–¥–µ–Ω–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {len(prices)}"
            )
            
            await status_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.")
            
        except Exception as e:
            await status_msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {str(e)}")
            
    except Exception as e:
        await status_msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω: {str(e)}")


async def main():
    if not os.getenv("BOT_TOKEN"):
        raise ValueError("BOT_TOKEN is required")
    
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped")
